<?php

/**
 * Let op: oauth2_server heeft geen API om automatisch servers of clients toe te voegen.
 * Dat betekent dat via Structuur -> OAuth2 Servers een server moet worden aangemaakt met de volgende instellingen:
 * - Naam: Main. 'Require exact redirect uri' uitvinken.
 * - Scope toevoegen met systeemnaam 'sp' en een scope met systeemnaam 'civicrm'.
 * - Clients toevoegen voor iedere site. Vul de exacte redirect-uri in (voor Drupal-sites: https://<sitenaam>/oauth/authorized2/1) en vink het hokje 'Automatically authorize this client' aan.
 * De onderstaande hooks zorgen voor het beschikbaar maken van een API om informatie over de ingelogde gebruiker en zijn groepen op te vragen.
 */

/**
 * Implementation of hook_default_services_endpoint().
 * Maakt een OAuth2-geauthenticeerde API beschikbaar onder /oauth2/api
 * @return array Endpoints
 */
function oauthloginprovider_default_services_endpoint() {
	$endpoint = new stdClass();
	$endpoint->disabled = FALSE;
	$endpoint->api_version = 3;
	$endpoint->name = 'oauth2login';
	$endpoint->server = 'rest_server';
	$endpoint->path = 'oauth2/api';
	$endpoint->authentication = [
		'oauth2_server' => [
			'server' => 'main',
		],
	];
	$endpoint->server_settings = [
		'formatters' => [
			'bencode' => FALSE,
			'json'    => TRUE,
			'php'     => FALSE,
			'xml'     => TRUE,
			'jsonp'   => FALSE,
		],
		'parsers'    => [
			'application/json'                  => TRUE, //Nice, but this will never work since we did not provide args to the endpoint resources
			'application/vnd.php.serialized'    => TRUE,
			'application/x-www-form-urlencoded' => FALSE,
			'application/xml'                   => TRUE,
			'multipart/form-data'               => TRUE,
			'text/xml'                          => TRUE,
			'text/yaml'                         => FALSE,
		],
	];
	$endpoint->resources = [
		'me'      => [
			'operations' => [
				'index' => [
					'enabled'  => '1',
					'settings' => [
						'oauth2_server' => [
							'require_authentication' => '1',
							'scope'                  => 'sp',
						],
					],
				],
			],
		],
		'roles'   => [
			'operations' => [
				'index' => [
					'enabled'  => '1',
					'settings' => [
						'oauth2_server' => [
							'require_authentication' => '0',
							'scope'                  => 'sp',
						],
					],
				],
			],
		],
		'civiapi' => [
			'operations' => [
				'index' => [
					'enabled'  => '1',
					'settings' => [
						'oauth2_server' => [
							'require_authentication' => '1',
							'scope'                  => 'civicrm',
						],
					],
				],
 				'create' => [
 					'enabled'  => '1',
 					'settings' => [
 						'oauth2_server' => [
 							'require_authentication' => '1',
 							'scope'                  => 'civicrm',
 						],
 					],
 				],
			],
		],
	];
	$endpoint->debug = 1;

	$endpoints[ $endpoint->name ] = $endpoint;

	return $endpoints;
}


/**
 * Implementation of hook_services_resources().
 * API-method om informatie over een gebruiker op te halen vanaf een client-site.
 * @return array Resources
 */
function spoauthprovider_services_resources() {
	$res = [
		'me'      => [
			'operations' => [
				'index' => [
					'access callback'  => 'user_access',
					'access arguments' => ['use oauth2 server'],
					'help'             => 'Retrieves information about the current user',
					'callback'         => 'spoauthprovider_me_index_action',
				],
			],
		],
		'roles'   => [
			'operations' => [
				'index' => [
					'access callback'  => 'user_access',
					'access arguments' => ['use oauth2 server'],
					'help'             => 'Lists roles that are available on this Drupal installation',
					'callback'         => 'spoauthprovider_roles_index_action',
				],
			],
		],
		'civiapi' => [
			'operations' => [
				'index' => [
					'access callback' => 'spoauthprovider_civiapi_access',
					'help'            => 'Calls the CiviCRM API as the current user',
					'callback'        => 'spoauthprovider_civiapi_index_action',
				],
 				'create' => [
 					'access callback' => 'spoauthprovider_civiapi_access',
 					'help'            => 'Calls the CiviCRM API as the current user',
 					'callback'        => 'spoauthprovider_civiapi_index_action',
 				],
			],
		],
	];

	return $res;
}

/**
 * API-actie onder /oauth2/api/me. Retourneert een object met de ingelogde user,
 * en een uitgebreid overzicht (met id's en namen) van (Drupal-)rollen.
 * @return object
 */
function spoauthprovider_me_index_action() {

	// Load entire user object (anders zijn extra velden niet beschikbaar)
	global $user;
	$myuser = user_load($user->uid, TRUE);

	$data = (array) $myuser;
	$unset = ['pass', 'session', 'cache', 'sid', 'ssid', 'uuid', 'data', 'rdf_mapping'];
	foreach ($unset as $u) {
		if (array_key_exists($u, $data)) {
			unset($data[ $u ]);
		}
	}

	foreach ($data['roles'] as $key => &$value) {
		$data['roles'][ $key ] = [
			'id'   => $key,
			'name' => $value,
		];
	}

	foreach ($data as $key => &$value) {
		if (is_array($value) && array_key_exists(LANGUAGE_NONE, $value)) {
			$value = $value[ LANGUAGE_NONE ][0]['value'];
		}
	}

	return (object) $data;
}

/**
 * API-actie onder /oauth2/api/roles. Retourneert alle rollen die bestaan op deze installatie.
 * @return object
 */
function spoauthprovider_roles_index_action() {

	$data = [];

	foreach (user_roles(TRUE) as $key => $name) {
		$data['roles'][ $key ] = [
			'id'   => $key,
			'name' => $name,
		];
	}

	return (object) $data;
}

/**
 * API-actie onder /oauth2/api/civiapi. Roept de CiviCRM-API aan met de rechten van de huidige gebruiker.
 * Required parameters:
 * - key, de CiviCRM site key (gewoon als extra check)
 * - alle toepasselijke CiviCRM API parameters: entity, action, debug, sequential, id, enz enz enz
 * @return object
 */
function spoauthprovider_civiapi_index_action() {

	if (!civicrm_initialize()) {
		return (object) ['is_error' => 1, 'error_message' => 'Could not initialize CiviCRM.'];
	}

	if (empty($_REQUEST['key']) || !CRM_Utils_System::authenticateKey(FALSE)) {
		return (object) ['is_error' => 1, 'error_message' => 'Invalid CiviCRM site key.'];
	}

	// Tijdelijke(?) hack -> via een call als dit initialiseert CiviCRM blijkbaar niet automatisch de userdata, waardoor we geen ACL hadden
	global $user;
	$params = [];
	civicrm_user_login($params, $user);

	// Filter API call parameters
	$entity = $_REQUEST['entity'];
	$action = $_REQUEST['action'];
	if (!$entity || !$action) {
		return (object) ['is_error' => 1, 'error_message' => 'Required parameters "entity" and "action" missing.'];
	}
	// Commented this out since we do want to make altering calls (e.g. creating a group, mailing, etc.)
	// if (stripos($action, 'get') !== 0) {
	// 	return (object) ['is_error' => 1, 'error_message' => 'Only GET calls are currently allowed via this API.'];
	// }

	// We gebruiken van de CiviCRM REST-klasse alleen de process-functie.
	// Niet handle() of run() want die gaan authenticeren obv de API key.
	$args = ['civicrm', $entity, $action];
	$result = CRM_Utils_REST::process($args, CRM_Utils_REST::buildParamList());

	return (object) $result;
}

/**
 * Access callback voor /civiapi resource.
 * @return bool Has access
 */
function spoauthprovider_civiapi_access() {
	return (user_access('use oauth2 server') && user_access('access CiviCRM'));
}